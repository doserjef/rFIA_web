---
title: Estimating forest attributes within unique spatial zones
linktitle: Incorporating Spatial Data
toc: true
type: docs
date: "2019-05-05T00:00:00+01:00"
draft: false
menu:
  tutorial:
    parent: Overview
    weight: 3

# Prev/next pager order (if `docs_section_pager` enabled in `params.toml`)
weight: 3
---

```{r echo=FALSE, warning=FALSE, message=FALSE}
library(rFIA)
library(sf)
 
```

___
## _**Grouping estimates by user-defined areal units**_
Want to compute estimates within your own areal units (spatial polygons)? All `rFIA` estimator functions make this task fast and easy. Simply hand your spatial polygons to the `polys` argument of an estimator function, like `tpa` or `biomass`, and estimates will be grouped within those spatial zones. No need to worry about projections, *`rFIA` functions will reproject FIA data to match that of your input polygon.*
```{r}
## Most recent subset
riMR <- clipFIA(fiaRI)

## Group estimates by the areal units, and return as a dataframe
tpa_polys <- tpa(riMR, polys = countiesRI)

## Same as above, but return an sf mulitpolygon object (spatially enabled)
tpa_polysSF <- tpa(riMR, polys = countiesRI, returnSpatial = TRUE)
```
{{% alert note %}}
`polys` object must be of class `SpatialPolygons` (`sp` package), `SpatialPolygonsDataFrame` (`sp` package), or `MultiPolygon` (`sf` package). See below for help on loading data in R.
{{% /alert %}}

<br>

## _**Returning estimates at the plot-level**_
Want to return estimates at the plot level and retain the spatial data associated with each FIA plot? Just specify `returnSpatial = TRUE` and `byPlot = TRUE` in any `rFIA` estimator function, and you've got it!

```{r}
## Spatial plots with biomass 
bio_pltSF <- biomass(riMR, byPlot = TRUE, returnSpatial = TRUE)

## Plot the results using default sf method
plot(bio_pltSF)

## Aboveground biomass/ acre (tons) for each plot
plot(bio_pltSF['BIO_AG_ACRE'])
```

<br>


## _**Visualization**_
If you opted to return estimates as a spatial object (specify `returnSpatial = TRUE`), you can easily produce spatial choropleth maps with `plotFIA`:
```{r eval=FALSE}
## Plot distribution of Basal area/ acre across space
plotFIA(tpa_polysSF, y = BAA, legend.title = 'BAA (sq.ft/acre)')

## You can even modify your call to y to adjust units!
## Convert sq.ft./acre to sq.m./acre
plotFIA(tpa_polysSF, y = BAA /10.7639104, legend.title = 'BAA (sq.m/acre)')
```
<img src="/img/spatialBAA.jpg" hspace = 50 vspace = 40>


<br>

## _**How to load spatial objects in R**_
There are many, many options available for working with spatial data in R. For loading multipolygon shapefiles, we recommend using `readOGR` from the `rgdal` package. 
``` {r eval=FALSE}
## Read a shapefile into R
## dsn: path to the directory where the shapefile components are stored
## layer: file name of the shapefile components w/ no extension
myPoly <- readOGR(dsn = 'path/to/my/folder/', layer = 'myShape')
```

For further reference on working with spatial data in R, we recommend these references: 

- <a href="https://rspatial.org/" target="_blank">Spatial Data Science in R</a>
- <a href="https://cengel.github.io/R-spatial/" target="_blank">Using Spatial Data with R</a>
- <a href="https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html" target="_blank">Mapping in R</a>



